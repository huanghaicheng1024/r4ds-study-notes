[["tidy-data.html", "9 Tidy data 9.1 键 9.2 处理关系数据的三种操作", " 9 Tidy data 学习利用dplyr中的函数处理关系数据，其实也就是实现SQL里边的一些内容。 library(tidyverse) library(nycflights13) 9.1 键 类似于数据库的定义，不再赘述。 关于如何验证表的主键，一种验证方法是对主键进行count()操作，然后查看是否有n大于1的记录，即看看是否违背唯一确定的性质： planes %&gt;% count(tailnum) %&gt;% filter(n&gt;1) #&gt; # A tibble: 0 x 2 #&gt; # ... with 2 variables: tailnum &lt;chr&gt;, n &lt;int&gt; 关于如何建立代理键，可以利用mutate与row_number(): x &lt;- tribble( ~a,~b, 1,2, 1,3, 2,3 ) (x %&gt;% mutate(key=row_number()) %&gt;% select(key,everything())) #&gt; # A tibble: 3 x 3 #&gt; key a b #&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 1 2 #&gt; 2 2 1 3 #&gt; 3 3 2 3 9.2 处理关系数据的三种操作 9.2.1 定义键列 通过上述函数的参数by来设置。 默认值by = NULL，自然连接。 字符向量by = \"x\"。这种方式与自然连接很相似，但只使用指定的公共变量。 命名字符向量by = c(\"a\" = \"b\")。这种方式会匹配x表中的a变量和y表中的b变量。输出结果中使用的是x表中的变量。适用于含义一样但名字不同的变量之间连接。 9.2.2 连接中的问题 首先，需要找出每个表中可以作为主键的变量。一般应该基于对数据的理解来确定主键，而不是凭经验寻找能作为唯一标识符的变量组合。从含义出发！ 确保主键中的每个变量都没有缺失值。（实体完整性…） 检查外键是否与另一张表的主键相匹配。最好的方法是使用anti_join()，由于数据录入错误，外键和主键不匹配的情况很常见。解决这种问题通常需要大量工作。 "]]
